{"version":3,"file":"popup.js","mappings":"yBACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAKF,IACxB,IAAIG,EAASH,GAAUA,EAAOI,WAC7B,IAAOJ,EAAiB,QACxB,IAAM,EAEP,OADAL,EAAoBU,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdR,EAAoBU,EAAI,CAACN,EAASQ,KACjC,IAAI,IAAIC,KAAOD,EACXZ,EAAoBc,EAAEF,EAAYC,KAASb,EAAoBc,EAAEV,EAASS,IAC5EE,OAAOC,eAAeZ,EAASS,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDb,EAAoBc,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,G,0BCIlF,WAsBI,SAASI,IACL,MAAMC,EAAaC,SAASC,eAAe,eAAeC,MAU1D,OATuBF,SAASC,eAAe,mBAChCE,MAAMC,QAAU,QAG/BJ,SAASC,eAAe,aAAaE,MAAMC,QAAU,OACrDJ,SAASC,eAAe,cAAcE,MAAMC,QAAU,OACtDJ,SAASC,eAAe,eAAeE,MAAMC,QAAU,OAG/CL,GACJ,IAAK,MACDC,SAASC,eAAe,aAAaE,MAAMC,QAAU,QACrD,MACJ,IAAK,OACDJ,SAASC,eAAe,cAAcE,MAAMC,QAAU,QACtD,MACJ,IAAK,QACDJ,SAASC,eAAe,eAAeE,MAAMC,QAAU,QACvD,MACJ,QAEI,YADAC,QAAQC,MAAM,uBAG1B,CAEA,SAASC,IAIPC,EAAY,cAAe,CAAEC,OAHdT,SAASC,eAAe,eAAeC,MAGjBA,MAFvBF,SAASC,eAAe,gBAAgBC,OAERQ,EAChD,CAEA,SAASC,IAELH,EAAY,kBAAmB,CAAEI,cAAe,EAAMC,WADrCb,SAASC,eAAe,eAAeC,QACYY,IAChET,QAAQU,IAAID,EAAS,GAE7B,CAEA,SAASE,IAELR,EAAY,kBAAmB,CAAEI,cAAe,EAAOC,WADxCb,SAASC,eAAe,eAAeC,QACeY,IACjET,QAAQU,IAAID,EAAS,GAE7B,CAEA,SAASJ,EAAoBO,GAC3BjB,SAASC,eAAe,SAASiB,UAAYD,CAC/C,CAEA,SAAST,EAAYW,EAAMC,EAASC,GAClCC,OAAOC,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAAQH,IACvD,MAAMI,EAAMJ,EAAK,GAEjBD,OAAOC,KAAKf,YACVmB,EAAIC,GACJ,CACET,OACAC,YAEFN,IACEO,EAASP,EAAS,GAErB,GAEL,CAvFAd,SAAS6B,iBAAiB,oBAAoB,WAE1C,MAAMC,EAAa9B,SAASC,eAAe,eACrC8B,EAAmB/B,SAASC,eAAe,sBAC3C+B,EAAwBhC,SAASC,eACnC,2BAGJ6B,EAAWD,iBAAiB,QAAStB,GACrCwB,EAAiBF,iBAAiB,QAASlB,GAC3CqB,EAAsBH,iBAAiB,QAASb,GAGhDhB,SACKC,eAAe,eACf4B,iBAAiB,SAAU/B,GAEhCA,GACJ,GAsEH,CA1FD,E","sources":["webpack://playcanvas-extension/webpack/bootstrap","webpack://playcanvas-extension/webpack/runtime/compat get default export","webpack://playcanvas-extension/webpack/runtime/define property getters","webpack://playcanvas-extension/webpack/runtime/hasOwnProperty shorthand","webpack://playcanvas-extension/./src/popup.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","\"use strict\";\n\nimport \"./popup.css\";\n\n(function () {\n\n    document.addEventListener(\"DOMContentLoaded\", function () {\n\n        const findButton = document.getElementById(\"find-button\");\n        const exportJsonButton = document.getElementById(\"export-json-button\");\n        const exportClipboardButton = document.getElementById(\n            \"export-clipboard-button\"\n        );\n\n        findButton.addEventListener(\"click\", findEntities);\n        exportJsonButton.addEventListener(\"click\", exportEntitiesToJson);\n        exportClipboardButton.addEventListener(\"click\", writeToClipboard);\n\n        // Attach event listener to handle changing the input field based on the selected method\n        document\n            .getElementById(\"find-method\")\n            .addEventListener(\"change\", handleMethodChange);\n        // Call it once to set the initial state\n        handleMethodChange();\n    });\n\n    function handleMethodChange() {\n        const findMethod = document.getElementById(\"find-method\").value;\n        const inputContainer = document.getElementById(\"input-container\");\n        inputContainer.style.display = \"block\";\n\n        // Hide all input containers\n        document.getElementById(\"tag-input\").style.display = \"none\";\n        document.getElementById(\"name-input\").style.display = \"none\";\n        document.getElementById(\"regex-input\").style.display = \"none\";\n\n        // Show the relevant input container based on the selected method\n        switch (findMethod) {\n            case \"tag\":\n                document.getElementById(\"tag-input\").style.display = \"block\";\n                break;\n            case \"name\":\n                document.getElementById(\"name-input\").style.display = \"block\";\n                break;\n            case \"regex\":\n                document.getElementById(\"regex-input\").style.display = \"block\";\n                break;\n            default:\n                console.error(\"Invalid find method\");\n                return;\n        }\n    }\n\n    function findEntities() {\n      const method = document.getElementById('find-method').value;\n      const value = document.getElementById('search-input').value;\n    \n      sendMessage('FIND_ENTITY', { method, value }, updateSelectedCount);\n    }\n\n    function exportEntitiesToJson() {\n        let exportType = document.getElementById(\"export-type\").value;\n        sendMessage(\"EXPORT_ENTITIES\", { downloadFile : true, exportType }, response => {\n            console.log(response);\n        });\n    }\n\n    function writeToClipboard() {\n      let exportType = document.getElementById(\"export-type\").value;\n        sendMessage(\"EXPORT_ENTITIES\", { downloadFile : false, exportType }, response => {\n            console.log(response);\n        });\n    }\n\n    function updateSelectedCount(count) {\n      document.getElementById('count').innerText = count;\n    }\n\n    function sendMessage(type, payload, callback) {\n      chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n        const tab = tabs[0];\n\n        chrome.tabs.sendMessage(\n          tab.id,\n          {\n            type,\n            payload,\n          },\n          response => {\n            callback(response);\n          }\n        );\n      });\n    }\n})();\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","handleMethodChange","findMethod","document","getElementById","value","style","display","console","error","findEntities","sendMessage","method","updateSelectedCount","exportEntitiesToJson","downloadFile","exportType","response","log","writeToClipboard","count","innerText","type","payload","callback","chrome","tabs","query","active","currentWindow","tab","id","addEventListener","findButton","exportJsonButton","exportClipboardButton"],"sourceRoot":""}